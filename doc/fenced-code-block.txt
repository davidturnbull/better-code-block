*fenced-code-block.txt*  Improved highlighting for fenced code blocks

===============================================================================
CONTENTS                                        *fenced-code-block-contents*

    1. Introduction .................. |fenced-code-block-introduction|
    2. Usage ........................ |fenced-code-block-usage|
    3. Configuration ................ |fenced-code-block-config|
    4. Commands ..................... |fenced-code-block-commands|
    5. Mappings ..................... |fenced-code-block-mappings|
    6. License ...................... |fenced-code-block-license|

===============================================================================
1. INTRODUCTION                              *fenced-code-block-introduction*

Fenced Code Block is a plugin that enhances syntax highlighting in 
Markdown code blocks by allowing you to highlight specific lines. This is 
particularly useful when explaining code examples, where you want to draw
attention to certain important lines.

Key features:
- Highlight specific lines within fenced code blocks
- Support for numerous programming languages
- Multiple highlighting styles (colors, bold, italic, etc.)
- Line numbering within code blocks
- Configurable options for appearance and behavior
- Recognizes common language identifiers (like `python`, `js`, `mdx`, etc.)

===============================================================================
2. USAGE                                          *fenced-code-block-usage*

This plugin is automatically activated when editing Markdown files. It detects
fenced code blocks marked with triple backticks (```) and applies highlighting
based on the specified attributes.

To highlight specific lines, add a highlight attribute to your code fence:

Example markdown with highlighted lines:
>
    # Example 
    
    ```python highlight="1-3,5"
    def hello_world():
        print("Hello, world!")
        return True
        
    if __name__ == "__main__":
        hello_world()
    ```
<

This will highlight lines 1-3 and line 5 within the code block.

The highlight attribute supports multiple formats:
- Single line: highlight="3"
- Multiple lines: highlight="1,3,5"
- Line ranges: highlight="1-3"
- Mixed: highlight="1-3,5,7-9"
- Alternative syntax with colon: highlight="1-3:5" (highlights lines 1-3 and 5)

Alternative keywords:
- You can also use "hl", "mark", or "emphasize" instead of "highlight"
- Example: ```python hl="1-3"

===============================================================================
3. CONFIGURATION                                *fenced-code-block-config*

You can configure the plugin behavior with the following variables:

*g:fenced_code_block_style*        Highlight style (default: 'green')
                                  Available: 'green', 'blue', 'yellow', 'cyan',
                                  'magenta', 'invert', 'bold', 'italic',
                                  'underline', 'undercurl', or custom styles

*g:fenced_code_block_custom*       Dictionary of custom highlight styles

*g:fenced_code_block_debug*        Debug mode (0=off, 1=on)

*g:fenced_code_block_extensions*   File extensions to process
                                  Default: ['md', 'markdown', 'txt']

*g:fenced_code_block_keyword*      Primary highlight keyword (default: 'highlight')

*g:fenced_code_block_keyword_aliases* 
                                  Alternative keywords
                                  Default: ['hl', 'mark', 'emphasize']

*g:fenced_code_block_show_line_numbers*
                                  Enable/disable line numbers (1=on, 0=off)

*g:fenced_code_block_line_number_method*
                                  How to display line numbers:
                                  'nvim', 'prop', 'sign', or 'auto'

*g:fenced_code_block_line_number_format*
                                  Format string for line numbers (default: ' %d ')

*g:fenced_code_block_line_number_style*
                                  Highlight group for line numbers

*g:fenced_code_block_error_style*  Style for errors (default: 'red')

*g:fenced_code_block_update_delay* Update delay in ms (0 for immediate)

*g:fenced_code_block_fence_patterns*
                                  Custom fence patterns for code blocks

Configuration examples:
>
    " Change default highlight style to yellow
    let g:fenced_code_block_style = 'yellow'
    
    " Disable line numbers in code blocks
    let g:fenced_code_block_show_line_numbers = 0
    
    " Register a custom highlight style
    call FencedCodeBlockRegisterStyle('my_style', 'ctermbg', 'lightblue', 'guibg', '#AADDFF')
    let g:fenced_code_block_style = 'my_style'
<

===============================================================================
4. COMMANDS                                    *fenced-code-block-commands*

The plugin provides the following commands:

*:FencedCodeBlockRefresh*       Force refresh of all highlights
*:FencedCodeBlockClear*         Clear all highlights
*:FencedCodeBlockToggleDebug*   Toggle debug mode
*:FencedCodeBlockStyle* {style} Change highlight style
*:FencedCodeBlockToggleLineNumbers*      Toggle line numbers in code blocks
*:FencedCodeBlockRegisterStyle* Register a custom highlight style

Examples:
>
    " Change to blue highlight style
    :FencedCodeBlockStyle blue
    
    " Register a custom inverted yellow style
    :FencedCodeBlockRegisterStyle bright_yellow guibg #FFFF00 guifg #000000 gui bold
<

===============================================================================
5. MAPPINGS                                    *fenced-code-block-mappings*

The plugin provides the following default mapping:

<Leader>bt                           Toggle the plugin state in the current buffer

You can define your own mapping:
>
    nmap <Leader>fc <Plug>(FencedCodeBlockToggle)
<

===============================================================================
6. LICENSE                                      *fenced-code-block-license*

This plugin uses the same license as Vim itself.

 vim:tw=78:ts=8:ft=help:norl: 
